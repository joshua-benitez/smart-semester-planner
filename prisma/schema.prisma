generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  assignments Assignment[]
  courses     Course[]
  rpEvents    RPEvent[]
  rank        Rank?
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id     String @id @default(cuid())
  name   String
  color  String?
  userId String
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  
  @@unique([userId, name])
}

model Assignment {
  id           String   @id @default(cuid())
  title        String
  description  String?
  dueDate      DateTime
  type         String   // 'homework', 'quiz', 'project', 'exam'
  difficulty   String   // 'easy', 'moderate', 'crushing', 'brutal'
  weight       Float    @default(1.0)
  priority     Int?
  status       String   @default("not_started") // 'not_started', 'in_progress', 'submitted', 'graded', 'missed'
  awaitingGrade Boolean @default(false)
  grade        Float?
  submittedAt  DateTime?
  suggestedDate DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userId   String
  courseId String
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  rpEvents RPEvent[]
}

model RPEvent {
  id           String   @id @default(cuid())
  userId       String
  assignmentId String?
  rpChange     Int
  reason       String
  description  String?
  createdAt    DateTime @default(now())
  
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
}

model Rank {
  id        String @id @default(cuid())
  userId    String @unique
  rpTotal   Int    @default(1000)
  rankName  String @default("Bronze")
  division  Int?   @default(5)
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}